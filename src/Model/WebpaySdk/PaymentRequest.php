<?php

declare(strict_types=1);

namespace ThreeBRS\SyliusGPWebpayPaymentGatewayPlugin\Model\WebpaySdk;

/**
 * Payment Requester class
 */
class PaymentRequest
{
    protected array $params = [];

    /**
     * Payment Requester
     *
     * @param int $orderNumber Payments number - must be in each request from trader unique.
     * @param float $amount Price to pay
     * @param int $currency Currency code ISO 4217
     * @param int $depositFlag Request Indicates whether the payment is to be paid automatically. Allowed values: 0 = no immediate payment required 1 = payment is required
     * @param string $url Full Merchant URL. A result will be sent to this address  request. The result is forwarded over customer browser
     * @param string|null $merOrderNumber Order Number. In case it is not specified, it will be used  value $orderNumber It will appear on the bank statement.
     */
    public function __construct(
        int $orderNumber,
        float $amount,
        int $currency,
        int $depositFlag,
        string $url,
        ?string $merOrderNumber = null,
    ) {
        $this->params['MERCHANTNUMBER'] = '';
        $this->params['OPERATION'] = 'CREATE_ORDER';
        $this->params['ORDERNUMBER'] = $orderNumber;
        $this->params['AMOUNT'] = $amount * 100;
        $this->params['CURRENCY'] = $currency;
        $this->params['DEPOSITFLAG'] = $depositFlag;

        if ($merOrderNumber) {
            $this->params['MERORDERNUM'] = $merOrderNumber;
        }

        $this->params['URL'] = $url;
    }

    /**
     * Set Digest for current request
     *
     * @param string $digest Verification signature of the string that is generated by concatenating all fields in the order given.
     *
     * @internal
     */
    public function setDigest(string $digest): void
    {
        $this->params['DIGEST'] = $digest;
    }

    /**
     * Gives You all Request params
     */
    public function getParams(): array
    {
        return $this->params;
    }

    /**
     * Set The Merchant Number for request
     *
     * @param string $number merchant number.
     *
     * @internal
     */
    public function setMerchantNumber(string $number): void
    {
        $this->params['MERCHANTNUMBER'] = $number;
    }

    /**
     * Add Description parameter to request fields
     *
     * @param string $value field value
     */
    public function setDescription(string $value): void
    {
        $this->params['DESCRIPTION'] = $value;
    }

    /**
     * Add Payment Method parameter to request fields
     *
     * @param string $value field value
     */
    public function setPreferredPaymentMethod(string $value): void
    {
        $this->params['PAYMETHOD'] = $value;
    }

    /**
     * Add Payment Methods parameter to request fields
     *
     * @param string $value field value
     */
    public function setAllowedPaymentMethods(string $value): void
    {
        $this->params['PAYMETHODS'] = $value;
    }

    public function setPsd2Data(array $psd2): void
    {
        $xml = new \SimpleXMLElement('<?xml version="1.0" encoding="utf-8"?><additionalInfoRequest xmlns="http://gpe.cz/gpwebpay/additionalInfo/request" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="4.0"/>');
        $this->toXml($xml, $psd2);
        $xmlAsString = $xml->asXML();
        assert($xmlAsString !== false, 'Failed to convert XML to string');
        $stringXml = str_replace(["\n", "\r"], '', $xmlAsString);

        $this->params['ADDINFO'] = $stringXml;
    }

    private function toXml(
        \SimpleXMLElement $object,
        array $data,
    ): void {
        foreach ($data as $key => $value) {
            if (is_array($value)) {
                $child = $object->addChild($key);
                assert($child !== null);
                $this->toXml($child, $value);
            } else {
                // if the key is an integer, it needs text with it to actually work.
                if ($key !== 0 && $key === (int) $key) {
                    $key = "key_$key";
                }

                $object->addChild((string) $key, $value);
            }
        }
    }
}
